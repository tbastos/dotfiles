" .vimrc
" Author: Thiago Bastos <tbastos@tbastos.com>
" Source: https://github.com/tbastos/dotfiles/blob/master/vim/vimrc

" Bundles ----------------------------------------------------------{{{1

" NeoBundle Begin {{{2

if has('vim_starting')
  if &compatible
    set nocompatible
  endif
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle (required)
NeoBundleFetch 'Shougo/neobundle.vim'

" Use vimproc for async command execution
NeoBundle 'Shougo/vimproc.vim', {
      \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'linux' : 'make',
      \     'unix' : 'gmake',
      \    },
      \ }
"}}}

" General
NeoBundle 'mhinz/vim-startify'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-abolish' " :Subvert
NeoBundle 'tpope/vim-eunuch' " UNIX helper commands
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'artnez/vim-wipeout'
NeoBundle 'bufkill.vim'
NeoBundle 'matchit.zip'

" Shell
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'tyru/open-browser.vim'
"NeoBundle 'mattn/webapi-vim'

" UI
NeoBundle 'bling/vim-airline'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 't9md/vim-choosewin' " visual window selection
NeoBundle 'regedarek/ZoomWin' " zoom in/out a split with <c-w>-o
NeoBundle 'mbbill/undotree'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'junegunn/goyo.vim' " distraction free editing
NeoBundle 'junegunn/limelight.vim' " focused writing

" Colors
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'reedes/vim-colors-pencil'
NeoBundle 'kergoth/vim-hilinks' " :HLT! for debugging syntax highlighting

" Search and Motion
NeoBundle 'justinmk/vim-sneak'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-help'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'rking/ag.vim'

" Text Objects
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'kana/vim-textobj-line' " al  il
NeoBundle 'kana/vim-textobj-entire' " ae  ie
NeoBundle 'saaguero/vim-textobj-pastedtext' " gb
NeoBundle 'kana/vim-textobj-lastpat' " a/  i/  a?  i?
NeoBundle 'kana/vim-textobj-indent' " ai  ii  aI  iI
NeoBundle 'thinca/vim-textobj-between' " af{char}  if{char}  (region between {char}s)
NeoBundle 'beloglazov/vim-textobj-quotes' " aq  iq
NeoBundle 'rhysd/vim-textobj-anyblock' " ab  ib  (quotes, (), {}, [] and <>)
NeoBundle 'kana/vim-textobj-function' " aF  iF
NeoBundle 'sgur/vim-textobj-parameter' " a,  i,
NeoBundle 'glts/vim-textobj-comment' " ac  ic
NeoBundle 'Julian/vim-textobj-variable-segment' " av  iv  (word_in_identifier; camelCaseToo)
NeoBundle 'whatyouhide/vim-textobj-xmlattr' " ax  ix

" Editing and Formatting
NeoBundle 'kana/vim-operator-user'
NeoBundle 'kana/vim-operator-replace'
NeoBundle 'rhysd/vim-operator-surround'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-commentary.git'
NeoBundle 'tommcdo/vim-exchange'
NeoBundle 'godlygeek/tabular'
NeoBundle 'Chiel92/vim-autoformat'
NeoBundle 'junegunn/vim-easy-align'
NeoBundle 'terryma/vim-expand-region'
NeoBundle 'terryma/vim-multiple-cursors'

" Code Completion
NeoBundle 'Shougo/neocomplete.vim'

" Snippets
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'honza/vim-snippets'

" Git
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'tpope/vim-fugitive'

" Testing
NeoBundle 'janko-m/vim-test'

" Code Analysis
NeoBundle 'scrooloose/syntastic'

" C/C++
" NeoBundle 'octol/vim-cpp-enhanced-highlight'
NeoBundle 'osyo-manga/vim-marching' " async clang code completion
NeoBundle 'rhysd/vim-clang-format'

" JavaScript
NeoBundleLazy 'pangloss/vim-javascript', {'autoload':{'filetypes':['javascript']}}
NeoBundleLazy 'marijnh/tern_for_vim', {'autoload':{'filetypes':['javascript']}, 'build': 'npm install'}
NeoBundleLazy 'othree/javascript-libraries-syntax.vim', {'autoload':{'filetypes':['javascript']}}
NeoBundleLazy 'elzr/vim-json', {'autoload':{'filetypes':['javascript','json']}}

" Lua
NeoBundle 'tbastos/vim-lua'

" Text
NeoBundleLazy 'plasticboy/vim-markdown', {'autoload':{'filetypes':['markdown']}}
NeoBundleLazy 'kannokanno/previm', {'autoload':{'filetypes':['markdown']}}

" Web
NeoBundleLazy 'othree/html5.vim', {'autoload':{'filetypes':['html']}}
NeoBundleLazy 'ap/vim-css-color', {'autoload':{'filetypes':['css','scss','sass','less']}}
NeoBundleLazy 'hail2u/vim-css3-syntax', {'autoload':{'filetypes':['css','scss','sass']}}
NeoBundleLazy 'mxw/vim-jsx', {'autoload':{'filetypes':['javascript']}}

" NeoBundle End {{{2
call neobundle#end()
filetype plugin indent on
NeoBundleCheck
"}}}

" Base Options -----------------------------------------------------{{{1

syntax enable

set autoread " auto reload changed files (unless vim contains changes)
set complete-=i " autocomplete should not scan included files (slow)
set completeopt=longest,menuone,preview
set display+=lastline " show part of the last line when it doesn't fit
set encoding=utf-8
set nofoldenable
set foldlevelstart=99
set formatoptions+=j " delete comment char when joining commented lines
set hidden  " buffer becomes hidden when it is abandoned
set history=1000
set laststatus=2
set lazyredraw " don't redraw while executing macros (for speed)
set modelines=0
set nrformats-=octal " no octal input
set number
set ruler
set sessionoptions=blank,curdir,folds,help,winpos,winsize
set shortmess+=I " disable welcome screen
set showcmd " show partial commands at far BR of the screen
set showfulltag
set showmatch " highlight matching brackets
set splitbelow
set splitright
set synmaxcol=800 " don't try to highlight lines longer than 800 chars
set notimeout
set ttimeout
set ttimeoutlen=10
set ttyfast " assume a fast terminal
set updatetime=1000 " msecs idle to update swap file and send CursorHold event
" set verbose=1
set visualbell

" Space and Formatting ---------------{{{2

set autoindent " copy indentation of the previous line
"let &colorcolumn=join(range(81,120),",")
set backspace=indent,eol,start " backspace through everything in insert mode
set expandtab " use spaces, not tabs
set formatoptions=cqrn1j
set linebreak
set linespace=1
set list " show invisible chars
set listchars=tab:▸\ ,trail:.,extends:❯,precedes:❮,nbsp:⌴
"set listchars+=eol:¬
set shiftround " round indent to multiple of shiftwidth
set shiftwidth=2 " an autoindent is two spaces
let &showbreak='↪ '
set smartindent " indent based on syntax
set softtabstop=2 " a tab adds two spaces while editing
set tabstop=8 " a real tab is displayed as eight spaces
set textwidth=79
set wrap " wrap lines by default

" Cache Dir --------------------------{{{2

function! s:get_cache_dir(suffix)
  return '~/.vim/.cache/' . a:suffix
endfunction

function! EnsureExists(path)
  if !isdirectory(expand(a:path))
    call mkdir(expand(a:path))
  endif
endfunction

" Undo and Swap Files ----------------{{{2

set undofile
set undoreload=10000
set undodir=~/.vim/.cache/undo//
set directory=~/.vim/.cache/swap//

call EnsureExists(&undodir)
call EnsureExists(&directory)

" Wild -------------------------------{{{2

set wildmenu " autocomplete commands
set wildmode=list:longest,full " list all and complete till longest common string
set wildignorecase

set wildignore+=*.git " VCS files
set wildignore+=*.o,*.out,*.obj " intermediate files
set wildignore+=*.jpg,*.png,*.gif " binary images
set wildignore+=*.zip,*.gz,*.bz2,*.xz " archive files
set wildignore+=*.swp,*~,._* " temp and backup files
set wildignore+=*.DS_Store " OSX files

" Convenience Mappings ---------------------------------------------{{{1

" Leader keys
let mapleader = ","
let maplocalleader = "\\"

" Quit all windows
nnoremap Q :qa<CR>

" Close current buffer (unless it's open in another window)
nnoremap <c-q> :BD<CR>

" Close all hidden buffers (leave only active buffers open)
nnoremap <Leader>bo :Wipeout<CR>

" U to redo (much better than c-r)
nnoremap U :redo<CR>

" FN keys
nnoremap <silent> <F1> :Startify<CR>
nnoremap <silent> <F2> :VimFilerExplorer -force-quit<CR>
nnoremap <silent> <F3> :UndotreeToggle<CR>
noremap  <silent> <F4> :TagbarToggle<CR>
inoremap <silent> <F4> <ESC>:TagbarToggle<CR>a
nnoremap <silent> <F5> :SClose<CR>

" Live preview (Markdown)
nnoremap <silent> <Leader>p :PrevimOpen<CR>

" Default Make (usually builds the project)
nnoremap M :Make!<CR>

" Default Dispatch (usually runs the project)
nnoremap K :Dispatch!<CR>

" Custom Make/Dispatch (prompts for arguments)
nnoremap <Leader>m :Make!<Space>
nnoremap <Leader>d :Dispatch!<Space>

" Close/Open the quickfix window
nnoremap <silent> <Leader>q :cclose<CR>
nnoremap <silent> <Leader>Q :Copen<CR>

" Navigate the quickfix list
nnoremap <left>  :cprev<CR>zvzz
nnoremap <right> :cnext<CR>zvzz

" Navigate the location list
nnoremap <up>    :lprev<CR>zvzz
nnoremap <down>  :lnext<CR>zvzz

" Quick splits
nnoremap <bar> :vsplit<CR>
nnoremap <c-\> :split<CR>

" Switch to alternate file
nnoremap <c-a> <c-^>

" Jump to another window (visual selection)
nmap  -  <Plug>(choosewin)

" Move cursor between windows (directionally)
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" Change the window layout by moving the current window
nnoremap <c-w>h <c-w>H
nnoremap <c-w>j <c-w>J
nnoremap <c-w>k <c-w>K
nnoremap <c-w>l <c-w>L

" Fugitive
nnoremap <Leader>ga :Git add %:p<CR><CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit -v -q<CR>
nnoremap <Leader>gt :Gcommit -v -q %:p<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>ge :Gedit<CR>
nnoremap <Leader>gr :Gread<CR>
nnoremap <Leader>gw :Gwrite<CR><CR>
nnoremap <Leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <Leader>gg :Ggrep<Space>
nnoremap <Leader>gm :Gmove<Space>
nnoremap <Leader>gb :Git branch<Space>
nnoremap <Leader>go :Git checkout<Space>
nnoremap <Leader>gp :Gpush<CR>
nnoremap <Leader>gP :Gpull<CR>

" Search and Movement ----------------------------------------------{{{1

set hlsearch   " highlight matches
set incsearch  " incremental searching
set ignorecase " searches are case insensitive...
set smartcase  " ... unless they contain at least one capital letter

set scrolloff=9 " min number of lines above/below the cursor
set sidescroll=1 " fast sidescroll
set sidescrolloff=10 " horizontal context around the cursor
set virtualedit+=block

" Move based on display lines, not buffer lines
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Auto-center after some common moves
nnoremap n nzz
nnoremap N Nzz
nnoremap } }zz
nnoremap { {zz
nnoremap <c-o> <c-o>zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

" Select the contents of the current line, excluding indentation.
nnoremap vv ^vg_

" Search the selection in visual mode by pressing * or #
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

" 2-character Sneak (default)
nmap s <Plug>Sneak_s
nmap S <Plug>Sneak_S
" visual-mode
xmap s <Plug>Sneak_s
xmap S <Plug>Sneak_S
" operator-pending-mode
omap s <Plug>Sneak_s
omap S <Plug>Sneak_S

" Editing ----------------------------------------------------------{{{1

" Use <Space>[] to add spaces in normal mode (complements vim-unimpaired)
nnoremap <Space>[ i<Space><ESC>
nnoremap <Space>] a<Space><ESC>

" Join inverted (move current line to the end of the next line)
nmap <Leader>j ]ekJ

" Shortcut for operations on the nearest pair of quotes (cq, dq, etc)
xmap q iq
omap q iq

" Paste over a text-obj (register 0)
map <C-p> "0<Plug>(operator-replace)

" Surround operators
map <silent><C-s>a <Plug>(operator-surround-append)
map <silent><C-s>d <Plug>(operator-surround-delete)
map <silent><C-s>c <Plug>(operator-surround-replace)

" Inner-most surround (among quotes, (), {}, [], <>, etc.)
nmap <silent><C-s><C-d> <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
nmap <silent><C-s><C-s> <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)

" Surround between a char
nmap <silent><C-s>db <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
nmap <silent><C-s>cb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)

" Start EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" Filetype-specific Configurations ---------------------------------{{{1

augroup ft_all
  au!
  " Remember last location in file, but not for commit messages
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 &&
        \ line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" Assembly {{{2
augroup ft_asm
  au!
  au FileType asm setlocal noexpandtab shiftwidth=8 tabstop=8 softtabstop=8
augroup END

" C {{{2
augroup ft_c
  au!
  au FileType c setlocal foldmethod=marker foldmarker={,}
augroup END

" Lua {{{2
augroup ft_lua
  au!
  au FileType lua setlocal foldmethod=syntax
augroup END

" Vim {{{2
augroup ft_vim
  au!
  au FileType vim setlocal foldmethod=marker
  au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

" Plugin-specific Configurations -----------------------------------{{{1

" BufKill ----------------------------{{{2

let g:BufKillOverrideCtrlCaret = 1
let g:BufKillActionWhenBufferDisplayedInAnotherWindow = 'cancel'

" Clang Completion (marching) --------{{{2

let g:marching_enable_neocomplete = 1
let g:marching_clang_command_option = "-std=c++11 -stdlib=libc++"

" Clang Format -----------------------{{{2

let g:clang_format#auto_formatexpr = 1
let g:clang_format#auto_format_on_insert_leave = 1

let g:clang_format#code_style = "LLVM"
let g:clang_format#style_options = {
      \ "Language" : "Cpp",
      \ "Standard" : "Cpp11",
      \ "TabWidth" : 2,
      \ "DerivePointerBinding" : "false",
      \ "PointerBindsToType" : "true",
      \ }

augroup ClangFormatSettings
  au!
  au FileType c,cpp,objc map <buffer><Leader>cf <Plug>(operator-clang-format)
augroup END

" Indent Guides (<Leader>ig)----------{{{2

let g:indent_guides_start_level = 2
" let g:indent_guides_guide_size = 1

" Markdown ---------------------------{{{2

let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_frontmatter=1

" NeoComplete ------------------------{{{2

let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_auto_select = 1

let g:neocomplete#data_directory=s:get_cache_dir('neocomplete')

" Complete using <TAB> and cancel using C-E
inoremap <expr><C-e> neocomplete#cancel_popup()

" <CR> cancels popup and inserts <CR>
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#cancel_popup() . "\<CR>"
endfunction

" C-J/K selects entries from the popup menu
inoremap <C-j> <C-n>
inoremap <C-k> <C-p>

" C-H undoes the completion; C-L completes the common substring
inoremap <expr><C-h> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.c =
      \ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?'
let g:neocomplete#sources#omni#input_patterns.cpp =
      \ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

" NeoMRU -----------------------------{{{2

let g:neomru#file_mru_limit = 100
let g:neomru#file_mru_path = s:get_cache_dir('neomru/file')
let g:neomru#directory_mru_path = s:get_cache_dir('neomru/directory')

" NeoSnippet -------------------------{{{2

let g:neosnippet#disable_runtime_snippets = { '_' : 1 } " disable neosnippet-snippets
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets,~/.vim/snippets'
let g:neosnippet#data_directory=s:get_cache_dir('neosnippet')

" Expand snippets using <TAB>
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? neocomplete#close_popup() : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"

" Trigger a snippet on a visual selection
xmap <TAB> <Plug>(neosnippet_expand_target)

" Conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" Sneak ------------------------------{{{2

let g:sneak#s_next = 1
let g:sneak#textobject_z = 0
let g:sneak#use_ic_scs = 0
let g:sneak#prompt = 'sneak>'

" Startify ---------------------------{{{2

let g:startify_enable_special         = 0
let g:startify_files_number           = 15
let g:startify_relative_path          = 1
let g:startify_change_to_vcs_root     = 1
let g:startify_session_persistence    = 1
let g:startify_session_delete_buffers = 1

let g:startify_session_dir = '~/.vim/.session'
let g:startify_bookmarks = [ '~/.dotfiles/vim/vimrc' ]

let g:startify_list_order = [
      \ ['  Bookmarks:'],
      \ 'bookmarks',
      \ ['  Sessions:'],
      \ 'sessions',
      \ ['  Recent files:'],
      \ 'files',
      \ ]

let g:startify_custom_indices =
      \ map(range(0,9), 'string(v:val)') +
      \ map(range(char2nr('A'),char2nr('Z')), 'nr2char(v:val)')

let g:startify_custom_header =
      \ map(split(system('figlet Welcome'), '\n'), '"   ". v:val') + ['','']

" Syntastic --------------------------{{{2

let g:syntastic_check_on_open = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_aggregate_errors = 1

let g:syntastic_error_symbol = '✗'
let g:syntastic_style_error_symbol = '✠'
let g:syntastic_warning_symbol = '∆'
let g:syntastic_style_warning_symbol = '≈'

" C++
let g:syntastic_cpp_compiler = 'clang'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libc++'

" Lua
let g:syntastic_lua_checkers = ["luac", "luacheck"]
let g:syntastic_lua_luacheck_args = "--no-unused-args"

" Test -------------------------------{{{2

nmap <silent> <Leader>t :TestNearest<CR>
nmap <silent> <Leader>T :TestFile<CR>
nmap <silent> <Leader>a :TestSuite<CR>
nmap <silent> <Leader>l :TestLast<CR>
nmap <silent> <Leader>v :TestVisit<CR>

let test#strategy = "dispatch"

let test#lua#busted#options = '--output=plainterminal --suppress-pending'

" Unite ------------------------------{{{2

" Fuzzy match by default
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

" Fuzzy matching for plugins not using matcher_default as filter
call unite#custom#source('outline,line,grep', 'matchers', ['matcher_fuzzy'])
call unite#custom#source('outline,line,grep', 'sorters', ['sorter_rank'])

" Prettier prompt
call unite#custom#profile('default', 'context', {
      \   'start_insert': 1,
      \   'direction': 'botright',
      \   'prompt': '» ',
      \   'prompt_direction': 'top',
      \ })

" Better time formats
let g:unite_source_buffer_time_format = "%Y-%m-%d  %H:%M:%S "

let g:unite_data_directory=s:get_cache_dir('unite')
let g:unite_source_history_yank_enable=1
let g:unite_source_rec_max_cache_files=5000

if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--line-numbers --nocolor --nogroup'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_rec_async_command =
        \ ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']

elseif executable('ack')
  let g:unite_source_grep_command = 'ack'
  let g:unite_source_grep_default_opts = '--no-heading --no-color -a -w'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_rec_async_command = ['ack', '-f', '--nofilter']
endif

" Map space to the prefix for Unite
nnoremap [unite] <Nop>
nmap <space> [unite]

" Resume the last Unite view (in normal mode, to preserve selection)
nnoremap <silent> [unite]<space> :<C-u>UniteResume -no-start-insert<CR>

" Search everything (in terms of files)
nnoremap <silent> [unite]e :<C-u>Unite -buffer-name=files buffer file_mru bookmark file_rec/async<CR>

" Search registers
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>

" Search buffers and recent files (switch...)
nnoremap <silent> [unite]s :<C-u>Unite -buffer-name=files buffer file_mru<CR>

" Search the yank history
nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<CR>

" Search the outline
nnoremap <silent> [unite]o :<C-u>Unite -buffer-name=outline -vertical outline<CR>

" Search a directory to change to
nnoremap <silent> [unite]d :<C-u>Unite -buffer-name=change-cwd -default-action=cd directory_mru directory_rec/async<CR>

" Search files
nnoremap <silent> [unite]f :<C-u>Unite -buffer-name=files file_rec/async<CR>

" Grep (using Ag) from the cwd
nnoremap <silent> [unite]g :<C-u>Unite -buffer-name=grep grep:.<CR>

" Search all help files
nnoremap <silent> [unite]h :<C-u>Unite -buffer-name=help help<CR>

" Search lines in the current buffer to jump to
nnoremap <silent> [unite]l :<C-u>Unite -buffer-name=lines line<CR>

" Search bookmarks
nnoremap <silent> [unite]b :<C-u>Unite -buffer-name=bookmarks bookmark<CR>

" Search commands
nnoremap <silent> [unite]c :<C-u>Unite -buffer-name=command -default-action=edit command<CR>

" Search all Unite sources
nnoremap <silent> [unite]u :<C-u>Unite -buffer-name=sources source<CR>

" Custom mappings unite buffers
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()

  " Esc to exit at any time
  nmap <buffer> <ESC> <Plug>(unite_exit)
  imap <buffer> <ESC> <Plug>(unite_exit)

  " Navigate options with Ctrl-J/K
  imap <buffer> <C-j> <C-n>
  imap <buffer> <C-k> <C-p>

  " Clear cache / redraw
  imap <buffer> <C-a> <Plug>(unite_redraw)

endfunction

" VimFiler ---------------------------{{{2

let g:vimfiler_as_default_explorer = 1
let g:vimfiler_data_directory = s:get_cache_dir('vimfiler')
let g:vimfiler_time_format = "%Y-%m-%d  %H:%M:%S"
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_marked_file_icon = '*'

" Theme ------------------------------------------------------------{{{1

let g:theme_default = {
      \  'typeface': 'Anonymice Powerline',
      \  'font_size': 13,
      \  'linespace': 1,
      \  'background': 'dark',
      \  'colorscheme': 'solarized',
      \ }

let g:theme_pencil = {
      \  'typeface': 'Anonymice Powerline',
      \  'font_size': 15,
      \  'linespace': 3,
      \  'background': 'light',
      \  'colorscheme': 'pencil',
      \ }

function! SetTheme(t)
  let &guifont = a:t.typeface . ':h' . a:t.font_size
  let &linespace = a:t.linespace
  let &background = a:t.background
  execute 'colorscheme ' . a:t.colorscheme
endfunction

call SetTheme(g:theme_default)

" Show cursorline only in the current window
augroup CursorLine
  autocmd!
  autocmd WinLeave,InsertEnter * set nocursorline
  autocmd WinEnter,InsertLeave * set cursorline
augroup END

" Airline
" let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=1

" GitGutter

let g:gitgutter_max_signs = 2048
" let g:gitgutter_sign_column_always = 1

" GUI Options ------------------------{{{2

if has("gui_running")
  set relativenumber
  set guioptions= " minimalist gui
  if has("gui_macvim")
    let macvim_skip_colorscheme = 1
    let macvim_skip_cmd_opt_movement = 1

    " change default startup dir
    autocmd VimEnter *  if !argc() | cd ~/Work | endif

    " go back to iTerm2 when the last window closes
    autocmd VimLeave * :!open -a iTerm2
  endif
end
"}}}

" Distraction-Free Text Editing ------{{{2

nmap <LocalLeader>g :Goyo<CR>
nmap <LocalLeader>l :Limelight!!<CR>
nmap <LocalLeader>t :call SetTheme(g:theme_pencil)<CR>:Goyo<CR>

" let g:limelight_default_coefficient = 0.3

function! s:goyo_enter()
  Limelight
endfunction

function! s:goyo_leave()
  Limelight!
  call SetTheme(g:theme_default)
endfunction

autocmd! User GoyoEnter
autocmd  User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave
autocmd  User GoyoLeave nested call <SID>goyo_leave()
"}}}

