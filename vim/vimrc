" .vimrc
" Author: Thiago Bastos <tbastos@tbastos.com>
" Source: https://github.com/tbastos/dotfiles/blob/master/vim/vimrc

" Initialization -------------------------------------------------------------

" Skip initialization for vim-tiny or vim-small.
if 0 | endif

let mapleader = ","
let maplocalleader = "\\"

" Minimal GUI
if has('gui_running')
  set guioptions=c
  set relativenumber
  if has("gui_macvim")
    let macvim_skip_colorscheme = 1
    let macvim_skip_cmd_opt_movement = 1
  endif
endif

" Disable GetLatestVimPlugin.vim
if !&verbose
  let g:loaded_getscriptPlugin = 1
endif

" Disable default plugins
let g:loaded_netrwPlugin = 1
let g:loaded_matchparen = 1
let g:loaded_2html_plugin = 1
let g:loaded_vimballPlugin = 1

if has('vim_starting')
  if &compatible
    set nocompatible " be iMproved
  endif
  " Enable NeoBundle
  set runtimepath+=~/.vim/bundle/neobundle.vim/
  " Default start directory
  if !argc() | cd ~/Work | endif
  let g:start_dir = getcwd()
endif

" Used in plugins.vim
function! GetCacheDir(suffix)
  return '~/.vim/.cache/' . a:suffix
endfunction

" Bundles --------------------------------------------------------------------

" Increase time limit for bundle installs
let g:neobundle#install_process_timeout = 900 " 15 minutes

call neobundle#begin()
if neobundle#load_cache()
  call neobundle#load_toml(expand('~/.vim/NeoBundle.toml'))
  call neobundle#load_toml(expand('~/.vim/NeoBundleLazy.toml'), {'lazy': 1, 'verbose': 0})
  NeoBundleSaveCache
endif
source ~/.vim/plugins.vim
call neobundle#end()

filetype plugin indent on

if !has('vim_starting')
  NeoBundleCheck
endif

" Base Options ---------------------------------------------------------------

syntax enable

set autoread " auto reload changed files (unless vim contains changes)
set cmdheight=1 " increase to see more messages
set complete-=i " autocomplete should not scan included files (slow)
set completeopt=longest,menuone,preview
" set conceallevel=2
" set concealcursor=niv
set display+=lastline " show part of the last line when it doesn't fit
set encoding=utf-8
set nofoldenable
set foldlevelstart=99
set formatoptions+=j " delete comment char when joining commented lines
set hidden  " buffer becomes hidden when it is abandoned
set history=1000
set laststatus=2
set lazyredraw " don't redraw while executing macros (for speed)
set modelines=0
set nrformats-=octal " no octal input
set number
set ruler
set sessionoptions=curdir,winsize
set shortmess+=c " disable completion messages
set showcmd " show partial commands at far BR of the screen
set showfulltag
set showmatch " highlight matching brackets
set noshowmode " already shown by statusline plugins
set showtabline=2 " always show tabline
set splitbelow
set splitright
set synmaxcol=800 " don't try to highlight lines longer than 800 chars
set notimeout
set ttimeout
set ttimeoutlen=10
set ttyfast " assume a fast terminal
set updatetime=1000 " msecs idle to update swap file and send CursorHold event
" set verbose=1
set visualbell

" Space and Formatting ---------------{{{2

set autoindent " copy indentation of the previous line
"let &colorcolumn=join(range(81,120),",")
set backspace=indent,eol,start " backspace through everything in insert mode
set expandtab " use spaces, not tabs
set formatoptions=cqrn1j
set linebreak
set linespace=1
set list " show invisible chars
set listchars=tab:▸\ ,trail:.,extends:❯,precedes:❮,nbsp:⌴
"set listchars+=eol:¬
set shiftround " round indent to multiple of shiftwidth
set shiftwidth=2 " an autoindent is two spaces
let &showbreak='↪ '
set smartindent " indent based on syntax
set softtabstop=2 " a tab adds two spaces while editing
set tabstop=8 " a real tab is displayed as eight spaces
set textwidth=79
set wrap " wrap lines by default

" Undo and Swap Files ----------------{{{2

set undofile
set undoreload=10000
set undodir=~/.vim/.cache/undo//
set directory=~/.vim/.cache/swap//

function! EnsureExists(path)
  if !isdirectory(expand(a:path))
    call mkdir(expand(a:path))
  endif
endfunction
call EnsureExists(&undodir)
call EnsureExists(&directory)

" Wild -------------------------------{{{2

set wildmenu " autocomplete commands
set wildmode=list:longest,full " list all and complete till longest common string
set wildignorecase

set wildignore+=*.git " VCS files
set wildignore+=*.o,*.out,*.obj " intermediate files
set wildignore+=*.jpg,*.png,*.gif " binary images
set wildignore+=*.zip,*.gz,*.bz2,*.xz " archive files
set wildignore+=*.swp,*~,._* " temp and backup files
set wildignore+=*.DS_Store " OSX files

" Convenience Mappings -------------------------------------------------------

" Edit .vimrc
nnoremap <LocalLeader>v :e $MYVIMRC<CR>

" Edit plugins.vim
nnoremap <LocalLeader>p :e ~/.vim/plugins.vim<CR>

" Edit NeoBundleLazy.toml
nnoremap <LocalLeader>b :e ~/.vim/NeoBundleLazy.toml<CR>

" Clear NeoBundleCache
nnoremap <LocalLeader>c :NeoBundleClearCache<CR>

" Reload .vimrc
nnoremap <LocalLeader>r :source $MYVIMRC<CR>

" Update bundles
nnoremap <LocalLeader>u :Unite neobundle/update -log -wrap -no-start-insert<CR>

" U to redo (better than c-r)
nnoremap U :redo<CR>

" Ex mode = nope
noremap Q <nop>

" Quit all windows
noremap QQ :qa<CR>
noremap Q!! :qa!<CR>

" Quit current window
noremap <Leader>q :q<CR>

" Write current buffer (save)
nnoremap <Leader>w :w<CR>

" FN keys
nnoremap <silent> <F1> :Startify<CR>
nnoremap <silent> <F2> :VimFilerExplorer -force-hide<CR>

" CD to current file's dir
nnoremap <Leader>cd :cd %:p:h<CR>:pwd<CR>

" Live preview (Markdown)
nnoremap <silent> <Leader>p :PrevimOpen<CR>

" Default Make (usually builds the project)
nnoremap M :Make!<CR>

" Default Dispatch (usually runs the project)
nnoremap K :Dispatch!<CR>

" Custom Make/Dispatch (prompts for arguments)
nnoremap <Leader>m :Make!<Space>
nnoremap <Leader>d :Dispatch!<Space>

" Close/Open the quickfix window
nnoremap <silent> <LocalLeader>q :cclose<CR>
nnoremap <silent> <LocalLeader>Q :Copen<CR>

" Navigate the quickfix list
nnoremap <left>  :cprev<CR>zvzz
nnoremap <right> :cnext<CR>zvzz

" Navigate the location list
nnoremap <up>    :lprev<CR>zvzz
nnoremap <down>  :lnext<CR>zvzz

" Quick splits
nnoremap \\ :split<CR>
nnoremap <bar> :vsplit<CR>

" Switch to alternate file
nnoremap <c-a> <c-^>

" Move cursor between windows (directionally)
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" Change the window layout by moving the current window
nnoremap <c-w>h <c-w>H
nnoremap <c-w>j <c-w>J
nnoremap <c-w>k <c-w>K
nnoremap <c-w>l <c-w>L

" Help (by default, open in a vertical split)
cabbrev h vert h

" Search and Movement --------------------------------------------------------

set hlsearch   " highlight matches
set incsearch  " incremental searching
set ignorecase " searches are case insensitive...
set smartcase  " ... unless they contain at least one capital letter

set scrolloff=9 " min number of lines above/below the cursor
set sidescroll=1 " fast sidescroll
set sidescrolloff=10 " horizontal context around the cursor
set virtualedit+=block

" Move based on display lines, not buffer lines
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Auto-center after some common moves
nnoremap n nzz
nnoremap N Nzz
nnoremap } }zz
nnoremap { {zz
nnoremap <c-o> <c-o>zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

" Select the contents of the current line, excluding indentation.
nnoremap vv ^vg_

" Search the selection in visual mode by pressing * or #
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

" Editing --------------------------------------------------------------------

" Use <Space>[] to add spaces in normal mode (complements vim-unimpaired)
nnoremap <Space>[ i<Space><ESC>
nnoremap <Space>] a<Space><ESC>

" Join inverted (move current line to the end of the next line)
nmap <Leader>J ]ekJ

" Reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" File Handling --------------------------------------------------------------

" Remember last location in files (except for git commit messages)
augroup RestoreCursor
  au!
  au BufReadPost *
        \ if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END

" Edit crontab files inplace
augroup EditingCrontab
  au!
  au FileType crontab setlocal backupcopy=yes
  " Caveat: on OS X the file has no ft, so we must use a pattern
  au BufEnter /private/tmp/crontab.* setlocal backupcopy=yes
augroup END

" Theme ----------------------------------------------------------------------

let g:theme_default = {
      \  'typeface': 'Source Code Pro Light',
      \  'font_size': 12,
      \  'linespace': 1,
      \  'background': 'dark',
      \  'colorscheme': 'solarized',
      \ }

let g:theme_pencil = {
      \  'typeface': 'Source Code Pro',
      \  'font_size': 14,
      \  'linespace': 3,
      \  'background': 'light',
      \  'colorscheme': 'pencil',
      \ }

function! SetTheme(t)
  let &guifont = a:t.typeface . ':h' . a:t.font_size
  let &linespace = a:t.linespace
  let &background = a:t.background
  execute 'colorscheme ' . a:t.colorscheme
endfunction

call SetTheme(g:theme_default)

" Show cursorline only in the current window
augroup CursorLine
  autocmd!
  autocmd WinLeave,InsertEnter * set nocursorline
  autocmd WinEnter,InsertLeave * set cursorline
augroup END
