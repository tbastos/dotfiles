" .vimrc and nvim/init.vim
" Author: Thiago Bastos <tbastos@tbastos.com>
" Source: https://github.com/tbastos/dotfiles/blob/master/vim/vimrc

" Initialization -------------------------------------------------------------

" Skip initialization for vim-tiny or vim-small.
if 0 | endif

scriptencoding utf-8

let mapleader = ","
let maplocalleader = "\\"

if has('gui_running')
  " minimal GUI
  set guioptions=c
  set relativenumber
  if has("gui_macvim")
    let macvim_skip_colorscheme = 1
    let macvim_skip_cmd_opt_movement = 1
  endif
else
  " use true colors in terminal (requires NeoVim or recent MacVim)
  set termguicolors
endif

" Disable default plugins
let g:loaded_netrwPlugin = 1
let g:loaded_matchparen = 1
let g:loaded_2html_plugin = 1
let g:loaded_vimballPlugin = 1

if has('vim_starting')
  let g:start_dir = '~/Work'
  if !argc() && isdirectory(g:start_dir) | cd g:start_dir | endif
  let g:start_dir = getcwd()
endif

" Helper
function! GetCacheDir(suffix)
  return '~/.cache/vim/' . a:suffix
endfunction

" Plugins --------------------------------------------------------------------

let g:plug_timeout = 120

call plug#begin('~/.vim/bundle')

" Colors
Plug 'lifepillar/vim-solarized8'
Plug 'reedes/vim-colors-pencil'

" General
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'ciaranm/securemodelines'

" Shell
Plug 'justinmk/vim-dirvish'
Plug 'tpope/vim-eunuch'
Plug 'tyru/open-browser.vim'

" UI
Plug 'mhinz/vim-startify'
Plug 'itchyny/lightline.vim'
Plug 'moll/vim-bbye', {'on': 'Bdelete'}
Plug 't9md/vim-choosewin', {'on': '<Plug>(choosewin)'}
Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
Plug 'mbbill/undotree', {'on': 'UndotreeToggle'}
Plug 'regedarek/ZoomWin' " zoom in/out a split with <C-w>o
Plug 'junegunn/goyo.vim', {'on': 'Goyo'} " distraction-free editing
Plug 'junegunn/limelight.vim', {'on': 'Limelight'} " focused writing
Plug 'kergoth/vim-hilinks', {'on': 'HLT'} " debug syntax highlighting

" Search and Navigation
set rtp+=/usr/local/opt/fzf " use the system's fzf
"Plug 'junegunn/fzf', { 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-sneak', {'on': '<Plug>Sneak'}
Plug 'matchit.zip'

" Text Objects
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line' " al, il (line)
Plug 'kana/vim-textobj-entire' " ae, ie (whole buffer)
Plug 'saaguero/vim-textobj-pastedtext' " gb (last pasted text)
Plug 'kana/vim-textobj-lastpat' " a/, i/, a?, i? (last search pattern, fwd/backwars)
Plug 'kana/vim-textobj-indent' " ai, ii, aI, iI (lines with indent >= cur line)
Plug 'beloglazov/vim-textobj-quotes' " aq, iq (nearest quotes of any kind)
Plug 'rhysd/vim-textobj-anyblock' " ab  ib  (quotes, (), {}, [] and <>)
Plug 'kana/vim-textobj-function' " af, if (function in C, Java, VimL, JS)
Plug 'thinca/vim-textobj-function-javascript' "
Plug 'sgur/vim-textobj-parameter' " a, i (parameter in a comma-delimited lists)
Plug 'glts/vim-textobj-comment' " ac, ic (comment)
Plug 'Julian/vim-textobj-variable-segment' " av, iv (a_segment_of anyVarName)

" Editing and Formatting
Plug 'SirVer/ultisnips'
Plug 'junegunn/vim-easy-align', {'on': ['<Plug>(EasyAlign)', 'EasyAlign']}
Plug 'Raimondi/delimitMate' " auto-closes quotes, parens, etc. in insert mode
Plug 'tpope/vim-endwise' " auto-closes control blocks in insert mode
Plug 'tpope/vim-commentary' " toggle comments with gc{textobj}
Plug 'tpope/vim-abolish', {'on': ['Abolish', 'Subvert']} " search/replace text transforms
                      " such as: crs to_snake, crm ToMixed, crc toCamel, cru TO_UPPERCASE
Plug 'kana/vim-operator-user'
Plug 'terryma/vim-multiple-cursors' " <C-n> creates multiple cursors in normal mode
Plug 'kana/vim-operator-replace'
Plug 'rhysd/vim-operator-surround'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter', {'on': ['GitGutterToggle']}

" Building and Testing
Plug 'tpope/vim-dispatch'
Plug 'scrooloose/syntastic', {'for': ['lua'], 'on': ['SyntasticCheck', 'SyntasticStatuslineFlag', 'SyntasticToggleMode', 'SyntasticInfo']}
Plug 'janko-m/vim-test', {'on': ['TestNearest', 'TestFile', 'TestSuite', 'TestLast', 'TestVisit']}
if has('nvim')
  Plug 'kassio/neoterm'
endif

" C/C++
Plug 'Valloric/YouCompleteMe', {'for': ['c', 'cpp'],
      \ 'do': './install.py --clang-completer --system-boost'}
autocmd! User YouCompleteMe if !has('vim_starting') | call youcompleteme#Enable() | endif
if has('nvim')
  Plug 'critiqjo/lldb.nvim'
else
  Plug 'jeaye/color_coded', {'for': ['c', 'cpp'],
        \ 'do': 'cmake . && make'}
endif
Plug 'rhysd/vim-clang-format', {'for': ['c', 'cpp']}

" JavaScript
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'marijnh/tern_for_vim', {'for': 'javascript', 'do': 'npm install'}
Plug 'othree/javascript-libraries-syntax.vim', {'for': 'javascript'}
Plug 'elzr/vim-json', {'for': ['javascript', 'json']}

" Lua
Plug 'tbastos/vim-lua', {'for': 'lua', 'frozen': 1}

" OpenGL
Plug 'tikhomirov/vim-glsl', {'for': 'glsl'}

" Text / Markup / Web
Plug 'rcmdnk/vim-markdown', {'for': 'markdown'}
Plug 'cespare/vim-toml', {'for': 'toml'}
Plug 'kannokanno/previm', {'on': 'PrevimOpen'}
Plug 'othree/html5.vim', {'for': 'html'}
Plug 'ap/vim-css-color', {'for': ['css','scss','sass','less']}
Plug 'hail2u/vim-css3-syntax', {'for': ['css','scss','sass']}

call plug#end()

filetype plugin indent on

source ~/.vim/lightline.vim

"
" Plugin settings, in alphabetical order
"

" ClangFormat
let g:clang_format#auto_format = 1
let g:clang_format#auto_formatexpr = 1
let g:clang_format#auto_format_on_insert_leave = 0 " interferes with indenting of {<CR>
let g:clang_format#code_style = "LLVM"
let g:clang_format#style_options = {
      \ "AlwaysBreakTemplateDeclarations" : "true",
      \ "AllowShortFunctionsOnASingleLine": "Inline",
      \ "DerivePointerBinding" : "false",
      \ "Language" : "Cpp",
      \ "PointerBindsToType" : "true",
      \ "Standard" : "C++11",
      \ "TabWidth" : 2,
      \ }
augroup ClangFormat
  au!
  au FileType c,cpp
        \ setlocal textwidth=0 |
        \ map <buffer><Leader>F <Plug>(operator-clang-format)
augroup END

" DelimitMate
let g:delimitMate_balance_matchpairs = 1
let g:delimitMate_expand_cr = 1

" Fugitive
doautoall fugitive BufNewFile
if exists('*lightline#update')
  call lightline#update()
endif
nnoremap <Leader>ga :Git add %:p<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit -v -q<CR>
nnoremap <Leader>gt :Gcommit -v -q %:p<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>ge :Gedit<CR>
nnoremap <Leader>gr :Gread<CR>
nnoremap <Leader>gw :Gwrite<CR><CR>
nnoremap <Leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <Leader>gg :Ggrep<Space>
nnoremap <Leader>gm :Gmove<Space>
nnoremap <Leader>gb :Git branch<Space>
nnoremap <Leader>go :Git checkout<Space>
nnoremap <Leader>gp :Gpush<CR>
nnoremap <Leader>gP :Gpull<CR>
nnoremap <Leader>gh :Gbrowse<CR>

" FZF -- fuzzy find everything
" Map space to the prefix for FZF
nnoremap [fzf] <Nop>
nmap <space> [fzf]
nnoremap <silent> [fzf]f :<C-u>Files<CR>
nnoremap <silent> [fzf]r :<C-u>History<CR>
nnoremap <silent> [fzf]a :<C-u>Ag<CR>
nnoremap <silent> [fzf]l :<C-u>Lines<CR>
nnoremap <silent> [fzf]b :<C-u>BLines<CR>
nnoremap <silent> [fzf]t :<C-u>Tags<CR>
nnoremap <silent> [fzf]: :<C-u>History:<CR>
nnoremap <silent> [fzf]/ :<C-u>History/<CR>
nnoremap <silent> [fzf]c :<C-u>Commands<CR>
nnoremap <silent> [fzf]s :<C-u>Snippets<CR>
nnoremap <silent> [fzf]h :<C-u>Helptags<CR>

" GitGutter
let g:gitgutter_enabled = 0
let g:gitgutter_max_signs = 2048
let g:gitgutter_sign_column_always = 1
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
nnoremap <LocalLeader>g :GitGutterToggle<CR>

" Goyo
function! s:goyo_enter()
  " Limelight
endfunction
function! s:goyo_leave()
  " Limelight!
  call SetTheme(g:theme_default)
endfunction
autocmd! User GoyoEnter
autocmd  User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave
autocmd  User GoyoLeave nested call <SID>goyo_leave()
nmap <LocalLeader>f :Goyo<CR>
nmap <LocalLeader>t :call SetTheme(g:theme_pencil)<CR>:Goyo<CR>

" Limelight
nmap <LocalLeader>l :Limelight!!<CR>

" LLDB
nmap <LocalLeader>b <Plug>LLBreakSwitch
vmap <LocalLeader>i <Plug>LLStdInSelected
nnoremap <LocalLeader>md :LLmode debug<CR>
nnoremap <LocalLeader>mc :LLmode code<CR>
nnoremap <LocalLeader>r :LL continue<CR>
nnoremap <LocalLeader>k :LL process kill<CR>
nnoremap <LocalLeader>p :LL print <C-R>=expand('<cword>')<CR>
vnoremap <LocalLeader>p :<C-U>LL print <C-R>=lldb#util#get_selection()<CR><CR>

" Markdown
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_frontmatter=1

" Neoterm
let g:neoterm_size = 9

" Startify
let g:startify_enable_special         = 0
let g:startify_enable_unsafe          = 1
let g:startify_files_number           = 15
let g:startify_relative_path          = 1
let g:startify_change_to_dir          = 1
let g:startify_change_to_vcs_root     = 1
let g:startify_session_persistence    = 1
let g:startify_session_delete_buffers = 1
let g:startify_session_dir = '~/.local/share/vim/session'
let g:startify_bookmarks = [ '~/.dotfiles/vim/vimrc' ]
let g:startify_list_order = [
      \ ['  Bookmarks:'],
      \ 'bookmarks',
      \ ['  Sessions:'],
      \ 'sessions',
      \ ['  Recent files:'],
      \ 'files',
      \ ]
let g:startify_custom_indices =
      \ map(range(0,9), 'string(v:val)') +
      \ map(range(char2nr('A'),char2nr('Z')), 'nr2char(v:val)')
let g:startify_custom_header =
      \ map(split(system('figlet Welcome'), '\n'), '"   ". v:val') + ['','']

" Surround
" surround operators
map <silent><C-s><C-a> <Plug>(operator-surround-append)
map <silent><C-s><C-d> <Plug>(operator-surround-delete)
map <silent><C-s><C-c> <Plug>(operator-surround-replace)
" delete/change inner-most surround (among quotes, (), {}, [], <>, etc.)
nmap <silent><C-s><C-d><C-d> <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
nmap <silent><C-s><C-s> <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)

" Syntastic
let g:syntastic_mode_map = {'mode': 'passive'} " we'll call syntastic
let g:syntastic_check_on_open = 0 " checks are always on write
let g:syntastic_auto_loc_list = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_stl_format = '%E{Error(%e)  %fe}%B{, }%W{Warning(%w)  %fw}'
let g:syntastic_error_symbol = '✗'
let g:syntastic_style_error_symbol = '✠'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_style_warning_symbol = '≈'
" Lua
let g:syntastic_lua_checkers = ["luac", "luacheck"]
let g:syntastic_lua_luacheck_args = "--no-unused-args"
augroup AutoSyntastic
  au!
  au BufWritePost *.lua call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

" Test
if has('nvim')
  let g:test#strategy = "neoterm"
else
  let g:test#strategy = "dispatch"
endif
let g:test#lua#busted#options = '--output=plainterminal --suppress-pending'
nmap <silent> <Leader>tn :TestNearest<CR>
nmap <silent> <Leader>tf :TestFile<CR>
nmap <silent> <Leader>tt :TestSuite<CR>
nmap <silent> <Leader>l :TestLast<CR>
nmap <silent> <Leader>te :TestVisit<CR>

" UltiSnips
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsSnippetsDir = $HOME.'/.vim/ultisnips'
let g:UltiSnipsSnippetDirectories = [g:UltiSnipsSnippetsDir]
let g:UltiSnipsEnableSnipMate = 0
let g:UltiSnipsExpandTrigger = '<C-l>'
let g:UltiSnipsJumpForwardTrigger = '<C-l>'
let g:UltiSnipsJumpBackwardTrigger = '<C-h>'
" Helper functions for snippets
function! CurrentLuaClass()
  let pattern = '^local \zs\i*\ze ='
  let line = search(pattern, 'bnW')
  return line == 0 ? '' : matchstr(getline(line), pattern).':'
endfunction
nnoremap <LocalLeader>s :UltiSnipsEdit<CR>

" YouCompleteMe
let g:ycm_allow_changing_updatetime = 0
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
let g:ycm_extra_conf_globlist = ['~/Work/*']
let g:ycm_key_list_select_completion   = ['<Tab>', '<C-J>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-Tab>', '<C-K>', '<Up>']
let g:ycm_key_detailed_diagnostics = '<LocalLeader>y'
let g:ycm_filetype_blacklist = {
      \ 'infolog' : 1,
      \ 'mail' : 1,
      \ 'notes' : 1,
      \ 'pandoc' : 1,
      \ 'qf' : 1,
      \ 'tagbar' : 1,
      \ 'unite' : 1,
      \ 'vimwiki' : 1,
      \}
" Jump to definition or declaration of symbol under cursor
nnoremap <silent> <Leader>j :YcmCompleter GoTo<CR>
" Inspect type of var under cursor
nnoremap <silent> <Leader>i :YcmCompleter GetType<CR>
" Display help about the identifier under the cursor
nnoremap <silent> <Leader>h :YcmCompleter GetDoc<CR>


" General Options ------------------------------------------------------------

syntax enable

set autoread " auto reload changed files (unless vim contains changes)
set cmdheight=1 " increase to see more messages
set complete-=i " autocomplete should not scan included files (slow)
set completeopt=longest,menuone,preview
" set conceallevel=2
" set concealcursor=niv
set display+=lastline " show part of the last line when it doesn't fit
set encoding=utf-8
set nofoldenable
set foldlevelstart=99
set formatoptions+=j " delete comment char when joining commented lines
set hidden  " buffer becomes hidden when it is abandoned
set history=1000
set laststatus=2
set lazyredraw " don't redraw while executing macros (for speed)
set modelines=0
set nrformats-=octal " no octal input
set number
set regexpengine=1 " old, faster re engine
set ruler
set sessionoptions=curdir,winsize
set shortmess+=c " disable completion messages
set showcmd " show partial commands at far BR of the screen
set showfulltag
set showmatch " highlight matching brackets
set noshowmode " already shown by statusline plugins
set showtabline=2 " always show tabline
set splitbelow
set splitright
set synmaxcol=800 " don't try to highlight lines longer than 800 chars
set notimeout
set ttimeout
set ttimeoutlen=10
set ttyfast " assume a fast terminal
set updatetime=1000 " msecs idle to update swap file and send CursorHold event
" set verbose=1
set visualbell

" Space and Formatting ---------------{{{2

set autoindent " copy indentation of the previous line
"let &colorcolumn=join(range(81,120),",")
set backspace=indent,eol,start " backspace through everything in insert mode
set expandtab " use spaces, not tabs
set formatoptions=cqrn1j
set linebreak
set linespace=1
set list " show invisible chars
set listchars=tab:↹\ ,trail:.,nbsp:‿,extends:→,precedes:←
set shiftround " round indent to multiple of shiftwidth
set shiftwidth=2 " an autoindent is two spaces
let &showbreak='↪ '
set smartindent " indent based on syntax
set softtabstop=2 " a tab adds two spaces while editing
set tabstop=8 " a real tab is displayed as eight spaces
set textwidth=79
set wrap " wrap lines by default

" Undo and Swap Files ----------------{{{2

set undofile
set undoreload=10000
set undodir=~/.cache/vim/undo//
set directory=~/.cache/vim/swap//

function! EnsureExists(path)
  if !isdirectory(expand(a:path))
    call mkdir(expand(a:path))
  endif
endfunction
call EnsureExists(&undodir)
call EnsureExists(&directory)

" Wild -------------------------------{{{2

set wildmenu " autocomplete commands
set wildmode=list:longest,full " list all and complete till longest common string
set wildignorecase

set wildignore+=*.git " VCS files
set wildignore+=*.o,*.out,*.obj " intermediate files
set wildignore+=*.jpg,*.png,*.gif " binary images
set wildignore+=*.zip,*.gz,*.bz2,*.xz " archive files
set wildignore+=*.swp,*~,._* " temp and backup files
set wildignore+=*.DS_Store " OSX files

" Convenience Mappings -------------------------------------------------------

" Edit .vimrc
nnoremap <LocalLeader>v :e $MYVIMRC<CR>

" Reload .vimrc
nnoremap <LocalLeader>R :source $MYVIMRC<CR>

" U to redo (better than c-r)
nnoremap U :redo<CR>

" Ex mode = nope
noremap Q <nop>

" Window quit = nope
noremap <c-w><c-q> <nop>

" Quit all windows (saving changes)
noremap QW :qa<CR>

" Quit all windows (discarding changes)
noremap Q! :qa!<CR>

" Quit special windows (preview, help, quickfix, unite)
noremap <silent> QQ :call <SID>close_special_windows()<CR>
function! s:close_special_windows()
  if has('nvim')
    Tclose
  endif
  call s:close_windows(['&pvw'], ['qf'])
endfunction
function! s:close_windows(options, filetypes)
  let save_winnr = winnr()
  let closable_winnrs = []
  windo if !(index(map(a:options, 'eval(v:val)'), 1)==-1 && index(a:filetypes, &ft)==-1) |
        \ call add(closable_winnrs, winnr()) | endif
  if index(closable_winnrs, save_winnr) != -1
    let save_winnr = -1
  end
  for winnr in reverse(closable_winnrs)
    if winnr < save_winnr
      let save_winnr -= 1
    endif
    exe winnr.'wincmd w'
    hide
  endfor
  if save_winnr >= 0
    exe save_winnr.'wincmd w'
  end
endfunction

" Quit current window
noremap <Leader>q :q<CR>

" Write current buffer (save)
nnoremap <Leader>w :w<CR>

" Close (delete) current buffer, unless it's open in another window
nnoremap <Leader>c :Bdelete<CR>

" FN keys
nnoremap <silent> <F1> :Startify<CR>
nnoremap <silent> <F2> :VimFilerExplorer -force-hide<CR>

" CD to current file's dir
nnoremap <Leader>C :cd %:p:h<CR>:pwd<CR>

" Live preview (Markdown)
nnoremap <silent> <Leader>p :PrevimOpen<CR>

" Call make (default target)
nnoremap M :Make<CR>

" Call make (type target)
nnoremap <Leader>m :Make!<Space>

" Dispatch a shell command (async)
nnoremap <Leader>d :Dispatch!<Space>

if has('nvim')
  nnoremap K :T make run<CR>
  nnoremap <Leader>d :T<Space>
else
  let g:dispatch = 'make run'
  nnoremap K :Dispatch!<CR>
endif

" Navigate the quickfix list
nnoremap <left>  :cprev<CR>zvzz
nnoremap <right> :cnext<CR>zvzz

" Navigate the location list
nnoremap <up>    :lprev<CR>zvzz
nnoremap <down>  :lnext<CR>zvzz

" Quick splits
nnoremap \\ :split<CR>
nnoremap <bar> :vsplit<CR>

" Move cursor between windows (directionally)
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" Jump to another window (with visual selection)
nmap - <Plug>(choosewin)

" Change the window layout by moving the current window
nnoremap <c-w>h <c-w>H
nnoremap <c-w>j <c-w>J
nnoremap <c-w>k <c-w>K
nnoremap <c-w>l <c-w>L

" Help (by default, open in a vertical split)
cabbrev h vert h

" Search and Movement --------------------------------------------------------

set hlsearch   " highlight matches
set incsearch  " incremental searching
set ignorecase " searches are case insensitive...
set smartcase  " ... unless they contain at least one capital letter

set scrolloff=9 " min number of lines above/below the cursor
set sidescroll=1 " fast sidescroll
set sidescrolloff=10 " horizontal context around the cursor
set virtualedit+=block

" Move based on display lines, not buffer lines
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Auto-center after some common moves
nnoremap n nzz
nnoremap N Nzz
nnoremap } }zz
nnoremap { {zz
nnoremap <c-o> <c-o>zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

" Select the contents of the current line, excluding indentation.
nnoremap vv ^vg_

" Search the selection in visual mode by pressing * or #
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

" Sneak
let g:sneak#f_reset = 1
let g:sneak#t_reset = 1
let g:sneak#s_next = 1
let g:sneak#textobject_z = 0
let g:sneak#use_ic_scs = 0
let g:sneak#prompt = 'sneak>'
" 2-character Sneak
nmap s <Plug>Sneak_s
nmap S <Plug>Sneak_S
xmap s <Plug>Sneak_s
xmap S <Plug>Sneak_S
omap s <Plug>Sneak_s
omap S <Plug>Sneak_S
" 1-character enhanced f (renders ; unnecessary)
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
" 1-character enhanced t (renders ; unnecessary)
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

" Editing --------------------------------------------------------------------

" Paste register 0 over a text object (replacing it)
noremap <C-p> "0<Plug>(operator-replace)

" Paste last yanked text in insert mode.
inoremap <C-p> <C-r><C-o>"

" Use <Space>[] to add spaces in normal mode (complements vim-unimpaired)
nnoremap <Space>[ i<Space><ESC>
nnoremap <Space>] a<Space><ESC>

" Join inverted (move current line to the end of the next line)
nmap <Leader>J ]ekJ

" Reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" Align selection / text object
vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" File Handling --------------------------------------------------------------

" Remember last location in files (except for git commit messages)
augroup RestoreCursor
  au!
  au BufReadPost *
        \ if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END

" Edit crontab files inplace
augroup EditingCrontab
  au!
  au FileType crontab setlocal backupcopy=yes
  " Caveat: on OS X the file has no ft, so we must use a pattern
  au BufEnter /private/tmp/crontab.* setlocal backupcopy=yes
augroup END

" Theme ----------------------------------------------------------------------

let g:theme_default = {
      \  'typeface': 'Source Code Pro Light',
      \  'font_size': 12,
      \  'linespace': 1,
      \  'background': 'dark',
      \  'colorscheme': 'solarized8_dark',
      \ }

let g:theme_pencil = {
      \  'typeface': 'Source Code Pro',
      \  'font_size': 14,
      \  'linespace': 3,
      \  'background': 'light',
      \  'colorscheme': 'pencil',
      \ }

function! SetTheme(t)
  let &guifont = a:t.typeface . ':h' . a:t.font_size
  let &linespace = a:t.linespace
  let &background = a:t.background
  execute 'colorscheme ' . a:t.colorscheme
endfunction

call SetTheme(g:theme_default)
